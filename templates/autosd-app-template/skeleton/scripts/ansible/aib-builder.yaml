- name: aib-builder
  hosts: all
  gather_facts: no
  tasks:
    - name: save all the facts
      set_fact:
        job_id: "{{ lookup('env', 'JOB_ID') }}"
        component_id: "{{ lookup('env', 'COMPONENT_ID') }}"
        source_repo: "{{ lookup('env', 'SOURCE_REPO') }}"
        source_branch: "{{ lookup('env', 'SOURCE_BRANCH') }}"
        source_tag: "{{ lookup('env', 'SOURCE_TAG') }}"
        aib_working_dir: "{{ lookup('env', 'AIB_WORKING_DIR') }}"
        aib_container_image: "{{ lookup('env', 'AIB_CONTAINER_IMAGE') }}"
    
    - name: read abi-ci config
      include_vars:
        file: "/workspace/source/.aib-ci.yml"

    - name: create aib facts
      set_fact:
        aib: "{{ default }}"

    - name: create more facts 1
      set_fact:
        build_location: "{{ aib_working_dir }}/builds/{{ job_id }}"
        image_name: "{{ component_id }}_{{ aib.name }}.{{ aib.spec.export_format }}"
    
    - name: create more facts 2
      set_fact:
        manifest_file_path: "{{ build_location }}/source/manifests/{{ aib.manifest }}"
        image_file_path: "{{ aib_working_dir }}/builds/{{ job_id }}_{{ image_name }}"

    - name: check if the image already exists
      become: true
      stat:
        path: "{{ image_file_path }}"
      register: image_stat

    - name: build the image
      when: image_stat.stat.exists == false
      block:

        - name: remove the working directory
          become: true
          ansible.builtin.file:
            path: "{{ build_location }}"
            state: absent
            
        - name: recreate the working directory
          become: true
          ansible.builtin.file:
            path: "{{ build_location }}"
            state: directory

        - name: transfer the /workspace to the build location
          become: true
          ansible.builtin.copy:
            src: "/workspace/source"
            dest: "{{ build_location }}"
            mode: "0755"

        - name: build the image 
          become: true
          async: 1200
          poll: 10
          shell: |
            set -x
            
            OSBUILD_CMD="automotive-image-builder/automotive-image-builder build \
              --distro "{{ aib.spec.distro }}" --arch "{{ aib.spec.arch }}" \
              --target "{{ aib.spec.target }}" --mode "{{ aib.spec.mode }}" \
              --export "{{ aib.spec.export_format }}" \
              --build-dir="{{ build_location }}" \
              --cache=".mpp-cache" --cache-max-size="10GB" \
              --osbuild-manifest="{{ build_location }}/output.json" \
              "{{ manifest_file_path }}" "output.{{ aib.spec.export_format }}" > {{ build_location }}/aib.log"

            # build the image using podman
            podman run --rm --privileged --pull=newer --security-opt label=type:unconfined_t \
              -v /dev:/dev -v "$PWD":"$PWD" \
              {{ aib_container_image }} \
              /bin/bash -c "cd $PWD/; $OSBUILD_CMD" \
              && mv "output.{{ aib.spec.export_format }}" "builds/{{ job_id }}_{{ image_name }}"

          args:
            chdir: "{{ aib_working_dir }}"